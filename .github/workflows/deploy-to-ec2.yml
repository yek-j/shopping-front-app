name: Build and Deploy to EC2 (Production)

on:
  push:
    branches: [ main ]

env:
  VITE_API_URL: ${{ secrets.VITE_API_URL }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Get GitHub Actions IP
      id: ip
      uses: haythem/public-ip@v1.2

    - name: Add GitHub Actions IP to security group
      run: |
        SECURITY_GROUP_ID=${{ secrets.EC2_SECURITY_GROUP_ID }}
        aws ec2 authorize-security-group-ingress \
          --group-id $SECURITY_GROUP_ID \
          --protocol tcp \
          --port 22 \
          --cidr ${{ steps.ip.outputs.ipv4 }}/32

    - name: Build Docker image
      run: |
        docker build \
          --build-arg VITE_API_URL=${{ env.VITE_API_URL }} \
          -t react-app:latest .
        docker save react-app:latest > react-app.tar

    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ec2-user
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        scp -i private_key -o StrictHostKeyChecking=no react-app.tar ${USER}@${HOST}:~/
        ssh -i private_key -o StrictHostKeyChecking=no ${USER}@${HOST} '
          docker load < react-app.tar
          rm react-app.tar
          docker stop react-app || true
          docker rm react-app || true
          docker run -d --name react-app \
            -p 80:80 \
            -p 443:443 \
            -e VITE_API_URL=${{ env.VITE_API_URL }} \
            react-app:latest
        '

    - name: Remove GitHub Actions IP from security group
      if: always()
      run: |
        SECURITY_GROUP_ID=${{ secrets.EC2_SECURITY_GROUP_ID }}
        aws ec2 revoke-security-group-ingress \
          --group-id $SECURITY_GROUP_ID \
          --protocol tcp \
          --port 22 \
          --cidr ${{ steps.ip.outputs.ipv4 }}/32